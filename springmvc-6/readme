研究springmvc对静态资源的处理

    方式1
        使用 < mvc:default-servlet-handler > 配合 < mvc:annotation-driven/ >
        原理：当使用< mvc:default-servlet-handler >标签好，springmvc框架会创建控制器对象：
            DefaultServletHttpRequestHandler(类似我们自定义的Controller),DispatcherServlet的
            url-pattern 配置为斜杠”/“,这样所有的请求都被拦截。DefaultServletHttpRequestHandler
            把请求再次转发给tomcat名为default的servlet。实际上我们希望静态资源由default servlet处理，
            其他请求还是让我们自定义的controller处理。
            default-servlet-handler和@RequestMapping注解由冲突，需要加入annotation-driven解决
         优点：方便
         缺点：要求Tomcat有default Servlet
    方式2
        使用   <mvc:resources /> 配合 < mvc:annotation-driven/ >标签
              <mvc:resources />和@RequestMapping注解由冲突，需要加入annotation-driven解决
           eg:
               <mvc:resources mapping="images/**" location="/images/"/>
               <mvc:resources mapping="js/**" location="/js/"/>
        原理：Spring3.0版本后，Spring又定义了专门用于处理静态资源访问请求的处理器：ResourceHttpRequestHandler
            加入<mvc:resources />标签后，框架会创建ResourceHttpRequestHandler对象，这个对象处理静态资源请求。
        优点：不依赖Tomcat或其他Servlet容器是否有default Servlet方法